#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('les-indecis-api:server');
var http = require('http');

var WebSocketServer = require('websocket').server;

const helper = require('../util/helper');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

var wsPort = 9091;

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create websocket server.
 */

var wsocketServer = http.createServer(function (request, response) {
  console.log((new Date()) + ' Received request for ' + request.url);
  response.writeHead(404);
  response.end();
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Listen on provided port, on all network interfaces.
 */

wsocketServer.listen(wsPort);
wsServer = new WebSocketServer({ httpServer: wsocketServer });
wsServer.on('request', onRequest);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listeners for websocket server
 */

function onRequest(request) {
  var connection = request.accept(null, request.origin);
  console.log((new Date()) + ' Connection accepted.');

  connection.on('message', function (message) {
    console.log('WEB SOCKET RECEIVED MESSAGE');
    if (message.type === 'utf8' && message.utf8Data.indexOf('token:') != -1) {
      console.log("SAVING CLIENT WEBSOCKET");
      var chars = message.utf8Data.split(':');
      var c = { "token": chars[1], "connection": connection };
      helper.saveClient(c);
    }
  });

  connection.on('close', function (reasonCode, description) {
    console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');
  });
}

helper.notifLoop();